{
  type: "recv",  // 支持send recv 两种模式
  syncTime: 5000,                 // 同步周期, 单位毫秒,不低于1000毫秒
  syncFile: "conf/offset.json",   // 同步offset到文件的路径
  dumpHex: true,                 // 数据包是否为hexString格式; recv模式时体现在日志中; send模式时,表示 `sendFile` 中的格式是否为hexString格式

  log: {
    // 日志等级, (DebugLevel=-1; InfoLevel=0, WarnLevel=1; ErrorLevel=2; DPanicLevel=3; PanicLevel=4; FatalLevel=5)
    logLevel: -1,
    colorful: false,  // 是否需要彩色
    maxAge: 72,       // 日志最长保留时间, 单位 小时
    rotationTime: 24, // 日志滚动周期, 单位 小时, 24小时滚动一个文件
    console: true,    // 是否同时输出到控制台
    logDir: "logs_recv",   // 日志路径
  },


  source: [
    // 采集数据源, 支持 kafkamq rabbitmq rocketmq redismq mqtt3 natscoremq natsjsmq 消息队列
    {
      type: "kafkamq",
      isCompress: false, // 是否为压缩数据
      mq: {
        version: "3.0.0",           // kafka版本, 指定协议支持, 早期版本4位,如 `0.10.3.1`; 之后的版本 3位, 如`3.0.0`, 如版本号非法, 则自动使用 0.10.2.0
        clientId: "sarama",         // clientID 必须在Kafka 集群中保证唯一，用于区分不同的客户端应用程序
        groupId: "groupId",         // 负载均衡时使用, 多个client用同一个groupID分别消费不同内容, 多个client用不同groupId则分别消费相同内容
        // brokerList: ["10.50.145.36:19092"],
        // brokerList: ["192.168.1.7:9092"],
        brokerList: ["172.30.1.25:9098"],
        channelBufferSize: 10000,   // 通道缓冲区大小
        net: {
          maxOpenRequests: 5,       // 最大请求数
          dialTimeout: 30000,       // 连接超时时长 单位ms
          readTimeout: 120000,      // 读超时时长 单位ms
          writeTimeout: 10000,      // 写超时时长 单位ms
          resolveHost: false,       // 是否使用域名, 使用集群域名时设置为true
        },
        consumer: {
          min: 1,                   // 每次从broker拉取的最小消息数
          max: 3,                   // 每次从broker拉取的最大消息数
          fetch: 1,                 // 每次从broker拉取的消息数
          initialOffset: -1,        // 消费者偏移量, -1: 从最新的消息开始消费, -2: 重新开始消费
          autoCommit: false,        // 是否自动commit
          autoCommitInterval: 5000, // 自动commit的情况下, 多久定时commit一次, 单位ms
          assignor: "range",        // 负载均衡策略, 可选范围[sticky|roundrobin|range], 默认为range, sticky: 粘性分配策略; roundrobin: 字典轮询分配策略; range: 范围分配策略
          heartbeatInterval: 5000,  // 心跳间隔时间
          rebalanceTimeout: 60000,  // 重均衡超时时间
          sessionTimeout: 10000,    // session超时时间
          topics: [
            // { topic: "PHONE", partition: 0, offset: -1 },
            // { topic: "sim_data", partition: 0, offset: -1 },
            { topic: "all_analog_data", partition: 0, offset: -1 },       // 模拟量数据 - 温度、风速等模拟数据
            { topic: "all_discrete_data", partition: 0, offset: -1 },     // 离散量数据 - 开关状态等离散数据
            { topic: "all_accumulator_data", partition: 0, offset: -1 },  // 累加量数据 - 总发电量、总有功等计算数据
          ],
        },
      },
    },
  ],

  target: [
   
  ],
}
